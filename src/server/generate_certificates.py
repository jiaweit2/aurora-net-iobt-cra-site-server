#!/usr/bin/env python

"""
The code for generate_certificates.py is derived from:
  https://github.com/zeromq/pyzmq/blob/master/examples/security/generate_certificates.py

Copyright (c) 2014 Chris Laws
All rights reserved.

Redistribution and use in source and binary forms are permitted
provided that the above copyright notice and this paragraph are
duplicated in all such forms and that any documentation,
advertising materials, and other materials related to such
distribution and use acknowledge that the software was developed
by the Chris Laws. The name of Chris Laws may not be used to endorse
or promote products derived from this software without specific prior
written permission.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

Generate client and server CURVE certificate files then move them into the
appropriate store directory, private_keys or public_keys. The certificates
generated by this script are used by the stonehouse and ironhouse examples.
In practice this would be done by hand or some out-of-band process.

Author: Chris Laws

Modified by: Theron Trout
"""

import os
import shutil
import zmq.auth
import signal

def generate_certificates(base_dir):
    ''' Generate client and server CURVE certificate files'''
    keys_dir = os.path.join(base_dir, 'certificates')
    public_keys_dir = os.path.join(base_dir, 'public_keys')
    secret_keys_dir = os.path.join(base_dir, 'private_keys')

    # Create directories for certificates, remove old content if necessary
    for d in [keys_dir, public_keys_dir, secret_keys_dir]:
        if os.path.exists(d):
            shutil.rmtree(d)
        os.mkdir(d)

    # # create new keys in certificates dir
    # server_public_file, server_secret_file = (
    #     zmq.auth.create_certificates(keys_dir, "server")
    # )

    client_public_file, client_secret_file = (
        zmq.auth.create_certificates(keys_dir, "client")
    )

    # move public keys to appropriate directory
    for key_file in os.listdir(keys_dir):
        if key_file.endswith(".key"):
            shutil.move(os.path.join(keys_dir, key_file),
                        os.path.join(public_keys_dir, '.'))

    # move secret keys to appropriate directory
    for key_file in os.listdir(keys_dir):
        if key_file.endswith(".key_secret"):
            shutil.move(os.path.join(keys_dir, key_file),
                        os.path.join(secret_keys_dir, '.'))


if __name__ == '__main__':
    if zmq.zmq_version_info() < (4, 0):
        raise RuntimeError("Security is not supported in libzmq version < "
                           "4.0. libzmq version {0}".format(zmq.zmq_version()))

    print('WARNING! Running this script will overwrite your')
    print('current certificates!')
    print('')
    print('If the server to which you are connecting uses')
    print('public-key authentication you will not be able')
    print('to connect again until the server administrator')
    print('installs the new public keys which  your are')
    print('about to to generate!')
    print('')

    try:
        data = input('Type "YES" if you wish to proceed: ')
    except KeyboardInterrupt:
        print('')
        print('Certificate generation canceled')
        exit(9)

    if data.strip() == 'YES':
        generate_certificates(os.path.dirname(__file__))
    elif data.strip() == 'y' or data.strip() == 'yes':
        print('You must enter "YES" in all capital letters.')
        print('Certificate generation canceled')
    else:
        print('Certificate generation canceled')
